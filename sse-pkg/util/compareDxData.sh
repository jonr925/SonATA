#!/bin/sh
################################################################################
#
# File:    compareDxData.sh
# Project: OpenSonATA
# Authors: The OpenSonATA code is the result of many programmers
#          over many years
#
# Copyright 2011 The SETI Institute
#
# OpenSonATA is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# OpenSonATA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with OpenSonATA.  If not, see<http://www.gnu.org/licenses/>.
# 
# Implementers of this code are requested to include the caption
# "Licensed through SETI" with a link to setiQuest.org.
# 
# For alternate licensing arrangements, please contact
# The SETI Institute at www.seti.org or setiquest.org. 
#
################################################################################


#set -x


# Compare dx data product files generated by an activity.
# Identify those files that are different in any significant way.

# For each of the data product file types,
# grab the files of that type for all of the
# activity units.  Then compare each pair of
# files in turn and report the differences, if any.
# Known expected differences, such as dx names, will
# not be reported.

# Assumes filenames have this format:
# yyyy-mm-dd_hh-mm-ss_UTC.act<actId>.<actType>.unit<N>.<dxName>.<file type suffix>
#
# For example
# 2002-10-01_14-22-00_UTC.act406.OneSiteRfTest.unit2.dxsim9.condensed.sigreports.txt 

# Note that these file types are only expected for main dxs:
#    condensed.candidates.txt
#    expanded.candidates.txt

GNU_sdiff="/usr/local/bin/sdiff"
GNU_cmp="/usr/local/bin/cmp"

setGlobalVariables() {

  totalFileComparisons=0
  totalFileComparisonFailures=0

  progname=`basename $0`

  # cmd line arg defaults
  actid=-1      # must be set on command line
  datadir="."   # default to current directory
  verbose=0     # turn verbose mode on/off:  0=off 1=on
  printwarn=1   # turn warnings on/off:  0=off 1=on

  setDatafileTypelist  # types of files to compare

  dxDiffList=""   # summary of dxs that differ
}

setDatafileTypelist() {

   # The list of data file types (by filename suffix)

   datafileTypelist="\
       L.baseline \
       R.baseline \
       L.compamp \
       R.compamp \
       condensed.sigreports.txt \
       expanded.sigreports.txt \
       condensed.candidates.txt \
       expanded.candidates.txt"
}

# TBD archive compamp files are generated for each signal 
#       archive-compamp \

error_exit() {
   exit 1
}

success_exit() {
   exit 0
}

usage () {
    echo "usage: $progname -act <activity id> [-dir <data dir>] [-help] [-verbose] [-nowarn]"
    echo "Compares dx data product files generated by an activity."
    echo "-act <act id>   : activity id."
    echo "-dir <data dir> : activity data products directory (default is '.')"
    echo "-nowarn         : turn off warning messages"
    echo "-help           : print this message"
    echo "-verbose        : turn on verbose output"
    error_exit
}

# Process the command line options

parseCmdLineArgs() {

   # must be at least 1 arg
   if [ $# -lt 1 ]
   then
       usage
   fi

   # walk through the args
   while [ "$1" ] 
   do
      case $1 in
      "-act")
	 shift
	 if [ "$1" = "" ]
	 then
	    echo "$progname: missing activity number"
	    error_exit
	 else
	    actid="$1"
	 fi
	;;
      "-dir")
	 shift
	 if [ "$1" = "" ]
	 then
	    echo "$progname: missing directory"
	    error_exit
	 else
	    datadir="$1"
	 fi
	;;
     "-nowarn")
	 printwarn=0
	 ;;
     "-verbose")
	 verbose=1
	 ;;
     "-help")
	 usage
	 ;;
     *)
       echo "$progname: unknown option: $1"
       echo "'$progname -help' for help"
       error_exit
       ;;
     esac

     shift

   done

}

verifyCmdLineArgs() {

   # must give act id
   if [ $actid = -1 ]
   then
       echo "$progname: Must give activity id."
       echo "'$progname -help' for help."
       error_exit
   fi

   # make sure directory exists
   if [ ! -d "$datadir" ]
   then
       echo "$progname: Can't access data directory: ${datadir}"
       error_exit
   fi

   # see if there's at least one data file with the
   # given act id in that directory 
   files=`ls $datadir/*act${actid}.* 2> /dev/null`
   if [ "$files" = "" ]
   then
       echo "$progname: No data files found for act id $actid in directory: $datadir"
       error_exit
   fi

}

checkForRemoteDatafiles() {

   # See if there are any remote data files.

   # TBD cross check this against the activity type to 
   # see if there should be any.

   haveRemoteFiles=1
   remfiles=`ls $datadir/*act${actid}.*remote* 2> /dev/null`
   if [ "$remfiles" = "" ]
   then
      haveRemoteFiles=0
   fi

   return $haveRemoteFiles
}

getDxNameFromFilename() {

    # assumes filename has fields separated by '.',
    # and that the 5th field is the dx name

    filename=$1
    dxName=`echo ${filename} | cut -d"." -f5`
    echo "$dxName"
}

compareTwoFiles() {

   fileA=$1
   fileB=$2

   # count the number of comparisons
   totalFileComparisons=`expr ${totalFileComparisons} + 1`

   if [ $verbose = 1 ]
   then
       echo "Comparing\n${fileA}\n${fileB}"
   fi

   # Use sdiff (rather than diff) to compare the files
   # since its output comes out all on 1 line.
   # -s = do not print identical lines
   # -w = width of output line
   #      set to 200 to avoid cutoff of the signal report lines 

   pid="$$"
   diffoutfile="/tmp/compareDxData${pid}.sdiff"
   ${GNU_sdiff} -w200 -s ${fileA} ${fileB} > $diffoutfile 2>&1
   status=$?

   if [ $status -eq 0 ]   # files match
   then

      if [ $verbose = 1 ]
      then
	 echo "Files match exactly."
      fi

   elif [ $status -eq 1 ]  # files are different
   then

      # Check the sdiff output for expected differences:
      # 1.  'Dx Name' 
      # 2.  'Time'  (for any kind of timestamp)
      # 3.  empty lines (i.e. lines that only differ by tabs, 
      #   blanks and either '<' or '>').
      #
      # If anything else is found, report it.

      awkout=`awk '$0 !~ /Dx Name|Time|^[\t| |<]+$|^[\t| |>]+$/' $diffoutfile`

      if [ "$awkout" != "" ]
      then

         totalFileComparisonFailures=`expr ${totalFileComparisonFailures} + 1`

         echo "\n================ Files differ unexpectedly ===================="
	 echo "${fileA}\n${fileB}"

	 echo ""

	 # get the file sizes
         filesizeA=`ls -l ${fileA} | awk '{print $5}'`
	 echo "Size of first file..........: $filesizeA bytes"

         filesizeB=`ls -l ${fileB} | awk '{print $5}'`
	 echo "Size of second file.........: $filesizeB bytes"

	 if [ $filesizeA -eq 0 -o $filesizeB -eq 0 ]
	 then 
	    echo "One of the files is empty."

	    # clean up
	    rm ${diffoutfile}

	    return

	 fi


	 if [ $filesizeA -eq $filesizeB ]
	 then
	    echo "File sizes are identical."
	    echo ""
	 else
	    echo "File sizes differ."
            echo ""
	    echo "Up to the end of the shorter file:"
	 fi


	 # use the shorter file size for percent comparisons
	 if [ $filesizeA -lt $filesizeB ]
	 then
	    comparisonFilesize=$filesizeA
	 else
	    comparisonFilesize=$filesizeB
	 fi


	 # use cmp and wc to figure out how many bytes are different between
	 # the two files.  Send the cmp error stream to the diffoutfile
	 # so any errors (like mismatched file sizes) are captured.
	 # Note that this only catches the differences up to the point
	 # where the shorter file hits EOF, so bytesdiff could evaluate to zero
	 # even though the files do differ.

	 bytesdiff=`${GNU_cmp} -l ${fileA} ${fileB} 2>>$diffoutfile | wc | awk '{print $1}'`
	 echo "File contents differ by.....: $bytesdiff bytes"

   	 # calculate percent difference 
	 percentdiff=`echo $bytesdiff $comparisonFilesize | awk '{printf("%5.1f", $1 / $2 * 100 )}'`
	 echo "Percent diff................: $percentdiff %"


	 if [ $bytesdiff -gt 0 ]
	 then

            # Figure out how far into the file the first byte differs.
	    # Use GNU compare so the value is base 10 rather than octal.
	    # Grab the first different byte in the file as reported by cmp.

	    firstDiffBytePos=`${GNU_cmp} -l ${fileA} ${fileB} 2>>/dev/null | head -1| awk '{print $1}'`

            # calculate percent offset into file of first different byte 
            offpercentdiff=`echo $firstDiffBytePos $comparisonFilesize | awk '{printf("%5.1f", $1 / $2 * 100 )}'`


	    echo "Diff begins at byte.........: ${firstDiffBytePos}"
	    echo "Diff begins N% into file....: $offpercentdiff %"

	 fi

	 echo ""
	 echo "Differences:"

	 # Display the differences between the two files
	 cat $diffoutfile

	 echo "==============================================================="

	 # remember the names of the dxs that differed

         dxA=`getDxNameFromFilename ${fileA}`
         dxB=`getDxNameFromFilename ${fileB}`
	 dxDiffList="${dxDiffList}\t$dxA differs from $dxB\n"

      else
        if [ $verbose = 1 ]
	then
	   echo "Files differ, but only as expected."
	fi
      fi

   else
     echo "$progname: ==== sdiff error ===="
   fi

   # clean up
   rm ${diffoutfile}

}


#compare each pair of files in turn

compareSequentialFilePairs() {

echo "compare sequential file pairs"

   filelist="$1"
       
   filecount=0
   previous=""
   for filename in $filelist
   do

      filecount=`expr $filecount + 1`

      if [ "$previous" = "" ]
      then

         # first time through, grab the first file
         previous=$filename

      else

	 compareTwoFiles $previous $filename
	 previous=$filename

      fi

      echo ""

   done # file loop

   if [ $filecount = 1 ]
   then

     if [ ${printwarn} = 1 ]
     then
        echo "Warning: Only 1 '$site $filetype' type file found, can't do comparison."
     fi

   else

     nFileCompares=`expr ${filecount} - 1`

     if [ $verbose = 1 ]
     then
	echo "(Compared ${nFileCompares} file pairs)"
	echo ""
     fi
   fi
}



compareAllFilePairs() {

echo "compare all file pairs"

   filelist="$1"

   # Make a "b" copy of the original filename list and
   # compare every file in the original list to 
   # every file in blist only once.
   # For each iteration of the original list,
   # skip ahead into the blist past the
   # values that have already been used.
   
   bfilelist=${filelist}
   
   # bskip is number of items to skip in the blist.
   # Start it at one so that we skip the
   # first comparison to avoid comparing the same
   # item to itself.
   
   bskip=1
   filecount=0
   
   for filename in $filelist
   do
      skipcount=0
      for bfilename in ${bfilelist}
      do
   
   	 filecount=`expr $filecount + 1`
   
   	 # skip the first N comparisons
   	 if [ $skipcount -lt $bskip ]
   	 then

   	    # echo "skipping bfilename $bfilename"
   	    skipcount=`expr $skipcount + 1`
   	    continue

   	 else
   	    compareTwoFiles $filename $bfilename
   	 fi
   
      done # inner file name loop (the blist)
   
      # next time around, start one item later in the blist 
      bskip=`expr $bskip + 1`
   
   done  # outer filename loop
   
}



# Look for all the expected files of each of the
# data types.  Compare them in pairs.

processFiles() {

   checkForRemoteDatafiles   # this sets the 'haveRemoteFiles' variable

   for site in \
       main \
       remote
   do 

     for filetype in ${datafileTypelist}
     do

       if [ $site = "remote" ]
       then

	   # skip remote completely if there are no files
	   if [ ${haveRemoteFiles} = 0 ]
	   then
	      continue
	   fi

	   # skip candidate files for remote (main-only data product)
	   if [ $filetype = "condensed.candidates.txt" -o \
	     $filetype = "expanded.candidates.txt" ]
	   then
	      continue
	   fi
       fi

       #if [ $verbose = 1 ]
       #then
          echo "------------------------------------------------------------"
	  echo "Checking: $site $filetype"
       #fi

       # get the datafiles of a type for all the activity units
       datafiles=`ls $datadir/*act${actid}.*.${filetype} 2>/dev/null`
       if [ "$datafiles" = "" ]
       then
          if [ ${printwarn} = 1 ]
	  then
	     echo "Warning: No '$site $filetype' type data files found."
	  fi

	  continue
       fi

       # TBD turn into an option flag
       compareSequentialPairs=0

       if [ ${compareSequentialPairs} = 1 ]
       then

          compareSequentialFilePairs "$datafiles"

       else  

          compareAllFilePairs "$datafiles"

       fi

     done   # filetype loop

   done   # site loop

}



printSummary() {

   if [ ${totalFileComparisons} = 0 ]
   then
      echo "Unable to compare any data files for Activity ${actid}."
      error_exit
   fi

   #echo "Compared ${totalFileComparisons} data file pairs."

   echo "=============================================="

   if [ ${totalFileComparisonFailures} = 0 ]
   then

      echo "Summary: success"
      echo ""

      echo "All ${totalFileComparisons} data file pairs matched for Activity ${actid}."
      success_exit

   else

      echo "Summary: failure"
      echo ""

      echo "=== ${totalFileComparisonFailures} dx data file comparisons out of ${totalFileComparisons} failed for Activity ${actid}. === "

      echo ""

      # summarize all of the accumulated 'dxK differs from dxN messages'
      echo "Dxs that differed:" 

      echo ${dxDiffList} | sort | uniq

      error_exit

   fi
}


# ---- main section --------

setGlobalVariables

parseCmdLineArgs $@

verifyCmdLineArgs

processFiles

printSummary