# DxConfirmation.pic
# umlgraph/pic2plot UML sequence diagram
# see http://www.umlgraph.org

# DX Confirmation Messages

.PS


copy "sequence.pic";

spacing = 2.0;
# doc version
move right;
move right 40;
move down 2;
"DxConfirmation.pic v2.0 2010-Jan-12 18:32:18 UTC"
move left 40;
# vertical spacing between messages
arrowhead = 7;
arrowwid = 0.5;
arrowht = 1.0;
awid = 1.0;
dashwid = 1.0;

step();
# title
step();
move down;
move down; move right; move right; 
"DX Activity Primary Signal CWD Confirmation Messages" ljust
move down;
move down;
move down;
move down;
step();
step();
move right;

# move objects apart horizontally
movewid = 3.5;

#define the objects
boxht = 4.0;

# ControlTask
boxwid = 12.0;
object(Control,"Control");

#ArchiveTask
boxwid = 11.0;
object(Archive,"Archive");

boxwid = 11.0;
object(Activity, "Activity");

# ConfirmationTask
boxwid = 14.0;
object(Conf,"Confirmation");

# CWDConfirmationTask
boxwid = 14.0;
object(CWD,"CW Confirm");

# PDConfirmationTask
boxwid = 14.0;
object(PD,"PD Confirm");

#CWDConfirmationChannel
boxwid = 11.0;
object(Channel,"Channel");

boxwid = 24.0;
object(Class,"Signal Classifier");

# SseInputTask
boxwid = 7.0;
object(Sse,"Sse");

move down;
step();
step();
step();

# message sequences
active(Control);
step();
#message(Control,Archive,"Start Archive");
active(Conf);
step();
message(Control,Conf,"Start Confirmation");
step();
active(CWD);
message(Conf,CWD,"Start Confirmation");
step();
message(Conf,PD,"Start Confirmaton");
step();
message(Conf,Sse,"Begin Sending Coherent Signals");
step();
step();
lconstraint(Conf,"For each CW Candidate");
message(Conf,Activity,"Get Next Candidate");
rmessage(Activity,Conf);
active(PD);
message(Conf,PD,"Confirm Pulse Candidate");
active(Channel);
step();
message(PD,Channel,"   Compute Channel Parameters ");
rmessage(Channel,PD);
inactive(Channel);
message(PD,Conf,"Pulse Signal Confirmation Complete");
step();
message(Conf,Archive,"Pulse Signal Confirmation Complete");
step();
inactive(PD);
active(CWD);
message(Conf,CWD,"Confirm CW Candidate");
step();
active(Channel);
message(CWD,Channel,"Compute Channel Parameters");
rmessage(Channel,CWD);
step();
step();
message(CWD,Channel,"Read CDData from Disk");
step();
step();
lconstraint(CWD,"16 Subbands");
rmessage(Channel,CWD);
inactive(Channel);
step();
step();
lconstraint(CWD,"Corner Turn");
step();
lconstraint(CWD,"Inverse FFT");
step();
lconstraint(CWD,"16K Channels");
step();
lconstraint(CWD,"Dedrift");
step();
lconstraint(CWD,"Heterodyne");
step();
lconstraint(CWD,"PowerDetection");
step();
message(CWD,CWD,"Coherent Detection");
step();
step();
lconstraint(CWD,"Dedrift");
step();
lconstraint(CWD,"Coherent Search");
step();
active(Class);
message(CWD,Class,"Classify Signal");
rmessage(Class,CWD);
step();
inactive(Class);
message(CWD,Sse,"Coherent Results");
step();
message(CWD,Conf,"CW Signal Confirmation Complete");
step();
message(Conf,Archive,"CW Signal Confirmation Complete");
step();
step();
step();
lconstraint(Conf,"When All Candidates Done");
message(Conf,Sse,"Done Sending Coherent Signals");
step();
message(Conf,Control,"Confirmation Complete");
complete(Activity);
complete(Control);
complete(Conf);
complete(CWD);
complete(PD);
complete(Sse);
complete(Class);
complete(Channel);
complete(Archive);
step();
step();
.PE
